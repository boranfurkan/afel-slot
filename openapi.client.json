{
    "openapi": "3.0.0",
    "paths": {
        "/": {
            "get": {
                "operationId": "AppController_getHello",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/s3/list/buckets": {
            "post": {
                "operationId": "S3Controller_listBuckets",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/S3Request"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "S3-Operations"
                ]
            }
        },
        "/s3/list/file": {
            "post": {
                "operationId": "S3Controller_getFile",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "S3-Operations"
                ]
            }
        },
        "/s3/upload/file": {
            "post": {
                "operationId": "S3Controller_uploadFile",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "S3-Operations"
                ]
            }
        },
        "/referals/code": {
            "get": {
                "operationId": "ReferanceController_getAccountReferralCode",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Get Account Referral Code for other users to use.A user can only receive one reference code. All reference codes are unique. If the user has a reference code, the existing one is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Referral"
                ]
            }
        },
        "/referals": {
            "post": {
                "operationId": "ReferanceController_useReferanceCode",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UseReferralCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Notifying the system of the reference code received from a user"
                    }
                },
                "tags": [
                    "Referral"
                ]
            }
        },
        "/referals/relations": {
            "get": {
                "operationId": "ReferanceController_getReferanceRelations",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Lists other users registered in the system with the users reference code.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAccountReferralRelationsDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Referral"
                ]
            }
        },
        "/transactions/wallets/holdings": {
            "get": {
                "operationId": "TransactionController_getWalletsHoldings",
                "summary": "Get token balances for multiple wallets",
                "description": "Retrieves token balances for a list of wallet addresses for specified token type",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "walletAddresses",
                        "required": true,
                        "in": "query",
                        "description": "Comma-separated wallet addresses",
                        "schema": {
                            "example": "ArvEQXVAbsGejTi1xrqxvTDyJxTVMVWkThW1MFd6vm3d,HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "description": "Type of token to get balances for",
                        "schema": {
                            "enum": [
                                "SOL",
                                "WAA",
                                "AFEL",
                                "USDC"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved wallet holdings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "wallets": [
                                            {
                                                "address": "ArvEQXVAbsGejTi1xrqxvTDyJxTVMVWkThW1MFd6vm3d",
                                                "balance": 1000000000,
                                                "uiBalance": "1.000000000"
                                            }
                                        ],
                                        "totalBalance": 1000000000,
                                        "totalUiBalance": "1.000000000",
                                        "totalWallets": 1
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/application/wallet/address": {
            "get": {
                "operationId": "TransactionController_getApplicationWalletAddress",
                "summary": "Get application wallet address",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wallet address retrieved",
                        "example": "ArvEQXVAbsGejTi1xrqxvTDyJxTVMVWkThW1MFd6vm3d",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/user/balance": {
            "get": {
                "operationId": "TransactionController_getAvailableBalance",
                "summary": "Get available balance",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "description": "Account ID to get balance for",
                        "schema": {
                            "example": "accountId",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "description": "Type of token to get balance for",
                        "examples": {
                            "SOL": {
                                "value": "SOL"
                            },
                            "WAA": {
                                "value": "WAA"
                            }
                        },
                        "schema": {
                            "enum": [
                                "SOL",
                                "WAA",
                                "AFEL",
                                "USDC"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BalanceResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/user/balance/list": {
            "get": {
                "operationId": "TransactionController_getAvailableBalanceList",
                "summary": "Get available balance",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "description": "Account ID to get balance for",
                        "schema": {
                            "example": "accountId",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BalanceResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/deposit/wallet": {
            "post": {
                "operationId": "TransactionController_walletDeposit",
                "summary": "Process a wallet deposit transaction",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WalletDepositRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Deposit successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletDepositResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "409": {
                        "description": "Duplicate transaction"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/deposit/prize/token": {
            "post": {
                "operationId": "TransactionController_prizeDeposit",
                "summary": "Process a prize deposit transaction, Only TOKEN prize",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrizeDepositRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Deposit successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrizeDepositResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "409": {
                        "description": "Duplicate transaction"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/deposit/game": {
            "post": {
                "operationId": "TransactionController_gameDeposit",
                "summary": "Process a game deposit transaction",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameDepositRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Deposit successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameDepositResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "409": {
                        "description": "Duplicate transaction"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/withdraw": {
            "post": {
                "operationId": "TransactionController_withdraw",
                "summary": "Process a withdrawal transaction",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WithdrawRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Withdrawal successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WithdrawResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "409": {
                        "description": "Duplicate transaction"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/blockages/add": {
            "post": {
                "operationId": "TransactionController_addBlockage",
                "summary": "Add a new blockage",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddBlockageDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddBlockageResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Blockage added successfully"
                    },
                    "400": {
                        "description": "Insufficient balance"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/blockages/remove": {
            "post": {
                "operationId": "TransactionController_removeBlockage",
                "summary": "Remove a single blockage",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveBlockageDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoveBlockageResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Blockage removed successfully"
                    },
                    "404": {
                        "description": "Blockage not found"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/blockages/remove/bulk": {
            "post": {
                "operationId": "TransactionController_removeMultipleBlockages",
                "summary": "Remove multiple blockages",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveMultipleBlockagesDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Blockages removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoveMultipleBlockagesResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Some blockages not found"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/user/blockages/list/active": {
            "get": {
                "operationId": "TransactionController_getActiveBlockages",
                "summary": "List active blockages",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "description": "Account ID to get balance for",
                        "schema": {
                            "example": "accountId",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "description": "Type of token to get balance for",
                        "examples": {
                            "SOL": {
                                "value": "SOL"
                            },
                            "WAA": {
                                "value": "WAA"
                            }
                        },
                        "schema": {
                            "enum": [
                                "SOL",
                                "WAA",
                                "AFEL",
                                "USDC"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActiveBlockagesResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/transactions/user/blockages/list/history": {
            "get": {
                "operationId": "TransactionController_getBlockageHistory",
                "summary": "Get blockage history",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "description": "Account ID to get balance for",
                        "schema": {
                            "example": "accountId",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "description": "Type of token to get balance for",
                        "examples": {
                            "SOL": {
                                "value": "SOL"
                            },
                            "WAA": {
                                "value": "WAA"
                            }
                        },
                        "schema": {
                            "enum": [
                                "SOL",
                                "WAA",
                                "AFEL",
                                "USDC"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of records to return",
                        "schema": {
                            "example": 10,
                            "type": "number"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "Number of records to skip",
                        "schema": {
                            "example": 0,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blockage history retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockageHistoryResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Transactions"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/transactions/blockages/burn": {
            "post": {
                "operationId": "TransactionController_burnBlockage",
                "summary": "Burn a blockage (Game exit scenario)",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BurnBlockageDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BurnBlockageResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Blockage burned successfully"
                    },
                    "404": {
                        "description": "Blockage not found"
                    }
                },
                "tags": [
                    "Transactions"
                ]
            }
        },
        "/nft-staking/nfts/{walletAddress}": {
            "get": {
                "operationId": "NFTStakingController_getUserNFTs",
                "summary": "Get user NFTs",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "walletAddress",
                        "required": true,
                        "in": "path",
                        "description": "Wallet address of the user",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list of user NFTs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/NFTMetadataDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid wallet address"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/freeze-nfts": {
            "post": {
                "operationId": "NFTStakingController_freezeNFTs",
                "summary": "Create freeze transactions for NFTs",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreezeNFTsRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns serialized transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/thaw-nfts": {
            "post": {
                "operationId": "NFTStakingController_thawNFTs",
                "summary": "Create thaw transactions for NFTs",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreezeNFTsRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns serialized transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResponseDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/finalize-transaction": {
            "post": {
                "operationId": "NFTStakingController_finalizeTransaction",
                "summary": "Finalize signed transaction",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinalizeTransactionRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns transaction signature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionSignatureDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid transaction"
                    },
                    "500": {
                        "description": "Transaction failed"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/wallet-stats/{walletAddress}": {
            "get": {
                "operationId": "NFTStakingController_getWalletStats",
                "summary": "Get wallet staking statistics",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "walletAddress",
                        "required": true,
                        "in": "path",
                        "description": "Wallet address",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns wallet staking stats",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletStatsDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid wallet address"
                    },
                    "404": {
                        "description": "Wallet not found"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/staked-nfts/{walletAddress}": {
            "get": {
                "operationId": "NFTStakingController_getStakedNFTs",
                "summary": "Get staked NFTs for wallet",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "walletAddress",
                        "required": true,
                        "in": "path",
                        "description": "Wallet address",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list of staked NFTs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StakedNFTDto"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid wallet address"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/wallet-points/{walletAddress}": {
            "get": {
                "operationId": "NFTStakingController_getWalletPoints",
                "summary": "Get wallet points",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "walletAddress",
                        "required": true,
                        "in": "path",
                        "description": "Wallet address",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns wallet points info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletPointsDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid wallet address"
                    },
                    "404": {
                        "description": "Wallet not found"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/leaderboard": {
            "get": {
                "operationId": "NFTStakingController_getLeaderboard",
                "summary": "Get staking leaderboard",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "Number of entries to return",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "Number of entries to skip",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns staking leaderboard",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeaderboardResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-staking/transaction/{signature}": {
            "get": {
                "operationId": "NFTStakingController_getTransactionStatus",
                "summary": "Get transaction status",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "signature",
                        "required": true,
                        "in": "path",
                        "description": "Transaction signature",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns transaction status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionStatusDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid signature"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "tags": [
                    "NFT Staking"
                ]
            }
        },
        "/nft-raffles/check-ticker/{walletAddress}": {
            "get": {
                "operationId": "NFTRaffleController_checkUserTickets",
                "summary": "Check wallet’s NFT purchases and assign raffle tickets.",
                "description": "Queries Magic Eden activities for the specified wallet (walletAddress). If any NFTs from the target collection were purchased and not already recorded, a new ticket record is created. Returns the user’s and the system’s total raffle ticket counts.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key required for application authentication.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "walletAddress",
                        "required": true,
                        "in": "path",
                        "description": "The user’s wallet address (e.g., a valid Solana address).",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns both the user’s current total tickets and the system’s total tickets.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckTickerResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "NFT RAFFLE"
                ]
            }
        },
        "/market-place/webhook": {
            "post": {
                "operationId": "MarketPlaceController_handleWebhook",
                "parameters": [
                    {
                        "name": "authorization",
                        "required": true,
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/nft-collection": {
            "get": {
                "operationId": "NFTCollectionController_getNFTs",
                "summary": "Get filtered NFTs with pagination",
                "description": "Returns NFTs based on trait filters with pagination support.",
                "parameters": [
                    {
                        "name": "page",
                        "required": true,
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "minimum": 1,
                            "default": 1,
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": true,
                        "in": "query",
                        "description": "Number of NFTs per page",
                        "schema": {
                            "minimum": 1,
                            "maximum": 500,
                            "default": 20,
                            "type": "number"
                        }
                    },
                    {
                        "name": "sort",
                        "required": true,
                        "in": "query",
                        "description": "Sort direction",
                        "schema": {
                            "default": "asc",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "NFT trait type",
                        "name": "trait_type",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "example": "Background",
                            "enum": [
                                "Background",
                                "Clothes",
                                "Head",
                                "Eye",
                                "Skin",
                                "Mouth"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Trait value",
                        "name": "value",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "example": "Supernova",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved NFTs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResponseDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "NFT Collection"
                ]
            }
        },
        "/nft-collection/traits": {
            "get": {
                "operationId": "NFTCollectionController_getAvailableTraits",
                "summary": "Get all available trait types and their possible values",
                "description": "Returns all trait types and their possible values that can be used for filtering",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved trait types and values",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "traits": {
                                            "Background": {
                                                "values": [
                                                    "Supernova",
                                                    "Pale Mint",
                                                    "Dusty Pink"
                                                ],
                                                "count": 9,
                                                "description": "Background color or pattern of the NFT"
                                            },
                                            "Eye": {
                                                "values": [
                                                    "None",
                                                    "Cool",
                                                    "3D"
                                                ],
                                                "count": 10,
                                                "description": "Eye type of the NFT character"
                                            }
                                        },
                                        "totalTraitTypes": 6,
                                        "metadata": {
                                            "totalNFTs": 3333,
                                            "maxValuesPerTrait": 12
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "NFT Collection"
                ]
            }
        },
        "/tokens/status": {
            "get": {
                "operationId": "TokenGateController_getUserStatus",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountTokenStatusResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "TokenGate"
                ]
            }
        },
        "/tokens/sync": {
            "post": {
                "operationId": "TokenGateController_syncTokenGate",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "TokenGate"
                ]
            }
        },
        "/games/wallet/address": {
            "get": {
                "operationId": "GamesController_getGameWalletAddress",
                "summary": "Get game wallet address",
                "description": "Returns the wallet address that users need to send funds to when depositing for games. This is the centralized wallet that receives all game deposits.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game wallet address successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "ArvEQXVAbsGejTi1xrqxvTDyJxTVMVWkThW1MFd6vm3d"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Wallet address not found for the application"
                    }
                },
                "tags": [
                    "Games"
                ]
            }
        },
        "/games/balance": {
            "get": {
                "operationId": "GamesController_getBalance",
                "summary": "Get user balance for games",
                "description": "Retrieves the user's available balance for the specified token type. The response includes total balance, available balance (total minus blockages), any active blockages, and details about each blockage. This endpoint is useful for showing users how much they can wager on games.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "description": "The user account ID to get balance for",
                        "schema": {
                            "example": "550e8400-e29b-41d4-a716-446655440000",
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "description": "The type of token to get balance for (SOL or AFEL)",
                        "schema": {
                            "enum": [
                                "SOL",
                                "WAA",
                                "AFEL",
                                "USDC"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance retrieved successfully. Returns balance details including any funds that are blocked/reserved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BalanceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "404": {
                        "description": "Wallet not found for the specified account"
                    }
                },
                "tags": [
                    "Games"
                ]
            }
        },
        "/games/balances": {
            "get": {
                "operationId": "GamesController_getAllBalances",
                "summary": "Get all token balances for user",
                "description": "Retrieves the user's available balances for all supported token types (SOL, AFEL). This is useful for showing users their total holdings across different tokens in the gaming platform.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "description": "The user account ID to get balances for",
                        "schema": {
                            "example": "550e8400-e29b-41d4-a716-446655440000",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balances retrieved successfully. Returns an array of balance details for each token type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BalanceResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    }
                },
                "tags": [
                    "Games"
                ]
            }
        },
        "/games/deposit": {
            "post": {
                "operationId": "GamesController_deposit",
                "summary": "Deposit funds for games",
                "description": "This endpoint processes deposits to the user account for gaming purposes. It validates the transaction signature on the blockchain before crediting the funds to the user's balance. The deposit can be made in SOL or AFEL tokens, depending on the specified tokenType. The receiver wallet address must match the application's designated wallet.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WalletDepositRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Deposit successfully processed. Returns the transaction ID, previous balance, deposited amount, and new balance.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletDepositResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request - May occur when the provided wallet address is incorrect, transaction signature is invalid, or minimum deposit amount is not met."
                    },
                    "409": {
                        "description": "Duplicate transaction - This transaction has already been processed."
                    }
                },
                "tags": [
                    "Games"
                ]
            }
        },
        "/games/withdraw/slotmachine": {
            "post": {
                "operationId": "GamesController_withdrawFromSlotMachine",
                "summary": "Withdraw funds from Slot Machine games",
                "description": "Processes withdrawals from Slot Machine game accounts with a 2% commission fee. The requested amount will have the commission deducted before processing the blockchain transaction. For example, if withdrawing 100 SOL, 2 SOL will be retained as commission and 98 SOL will be sent to the user's wallet. The minimum withdrawal amounts are 0.025 SOL for SOL tokens and 1 AFEL for AFEL tokens.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WithdrawRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Withdrawal successfully processed. Returns transaction signature, transferred amount (after commission), and balance details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WithdrawResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request - May occur due to insufficient balance, withdrawal amount below minimum limit, or invalid destination address."
                    },
                    "409": {
                        "description": "Duplicate transaction - This transaction has already been processed."
                    }
                },
                "tags": [
                    "Games"
                ]
            }
        },
        "/games/withdraw/coinflip": {
            "post": {
                "operationId": "GamesController_withdrawFromCoinFlip",
                "summary": "Withdraw funds from Coin Flip games",
                "description": "Processes withdrawals from Coin Flip game accounts with a 2% commission fee. The requested amount will have the commission deducted before processing the blockchain transaction. For example, if withdrawing 100 SOL, 2 SOL will be retained as commission and 98 SOL will be sent to the user's wallet. The minimum withdrawal amounts are 0.025 SOL for SOL tokens and 1 AFEL for AFEL tokens.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WithdrawRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Withdrawal successfully processed. Returns transaction signature, transferred amount (after commission), balance details, and commission amount.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WithdrawResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request - May occur due to insufficient balance, withdrawal amount below minimum limit, or invalid destination address."
                    },
                    "409": {
                        "description": "Duplicate transaction - This transaction has already been processed."
                    },
                    "429": {
                        "description": "Rate limit exceeded - Too many withdrawal requests in a short period."
                    }
                },
                "tags": [
                    "Games"
                ]
            }
        },
        "/games/slotmachine/play": {
            "post": {
                "operationId": "SlotMachineController_play",
                "summary": "Play Slot Machine Game",
                "description": "Initiates a slot machine game with the specified bet amount and token type. The slot machine generates three random symbols based on weighted probabilities. Winnings are calculated based on matching symbols and their corresponding payout multipliers. Two matching symbols result in a smaller win, while three matching symbols result in a larger win. The result includes the generated symbols, win status, multiplier applied, bet amount, win amount, and balance information before and after the game.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlaySlotMachineDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Game played successfully. Returns the result of the slot spin including symbols generated, win/loss status, multiplier applied, bet amount, win amount, and balance information before and after the game.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SlotMachineResultDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or insufficient balance. Occurs when the player has insufficient funds to place the bet, the bet amount is below the minimum limit for the selected token type, or other validation errors occur."
                    },
                    "401": {
                        "description": "Unauthorized. Authentication credentials are missing or invalid."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred during game processing."
                    }
                },
                "tags": [
                    "Slot Machine Game"
                ]
            }
        },
        "/games/slotmachine/history": {
            "get": {
                "operationId": "SlotMachineController_getHistory",
                "summary": "Get Slot Machine Game History",
                "description": "Retrieves the history of slot machine games played by a specific user account. Results are paginated and ordered by creation date (newest first). Each game record includes the symbols generated, bet amount, win amount, win multiplier, whether the game was won or lost, and the timestamp of when the game was played.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game history retrieved successfully. Returns a list of game records including symbol combinations, bet amounts, win amounts, and timestamps, along with pagination information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SlotMachineHistoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters. Occurs when accountId is missing or pagination parameters are invalid."
                    },
                    "401": {
                        "description": "Unauthorized. Authentication credentials are missing or invalid."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred while retrieving game history."
                    }
                },
                "tags": [
                    "Slot Machine Game"
                ]
            }
        },
        "/games/slotmachine/stats": {
            "get": {
                "operationId": "SlotMachineController_getStats",
                "summary": "Get User Slot Machine Statistics",
                "description": "Retrieves comprehensive statistics about a user's performance in slot machine games for a specific token type. Statistics include total games played, wins and losses count, win rate percentage, financial metrics (total bet amount, total winnings, net profit), average win multiplier, frequency distribution of each symbol, and the largest single win amount.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully. Returns detailed gaming statistics including win rate, financial metrics, symbol distribution frequencies, and other performance indicators for the specified account and token type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SlotMachineStats"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters. Occurs when accountId or tokenType is missing or invalid."
                    },
                    "401": {
                        "description": "Unauthorized. Authentication credentials are missing or invalid."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred while calculating statistics."
                    }
                },
                "tags": [
                    "Slot Machine Game"
                ]
            }
        },
        "/games/coinflip/play": {
            "post": {
                "operationId": "CoinFlipController_play",
                "summary": "Play Coin Flip Game",
                "description": "Places a bet on the coin flip game with specified parameters. Player chooses HEADS or TAILS, and places a bet. The coin is flipped and if the player guessed correctly, they win double their bet amount (minus 2% commission). The result, winning status, and updated balance information are returned. Each play generates a unique transactionId for tracking purposes.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayCoinFlipDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Game played successfully. Returns the result of the coin flip, bet amount, win amount (if any), balance before and after the game, and other game details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoinFlipResultDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or insufficient balance. Occurs when the player has insufficient funds to place the bet, the bet amount is below the minimum limit, or other validation errors occur."
                    },
                    "401": {
                        "description": "Unauthorized. Authentication credentials are missing or invalid."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred during game processing."
                    }
                },
                "tags": [
                    "Coin Flip Game"
                ]
            }
        },
        "/games/coinflip/history": {
            "get": {
                "operationId": "CoinFlipController_getHistory",
                "summary": "Get Coin Flip Game History",
                "description": "Retrieves the history of coin flip games played by a specific user account. Results are paginated and ordered by creation date (newest first). Each game record includes the chosen side, result, bet amount, win amount, and whether the game was won or lost.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game history retrieved successfully. Returns a list of game records including result details, timestamps, and pagination information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoinFlipHistoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters. Occurs when accountId is missing or pagination parameters are invalid."
                    },
                    "401": {
                        "description": "Unauthorized. Authentication credentials are missing or invalid."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred while retrieving game history."
                    }
                },
                "tags": [
                    "Coin Flip Game"
                ]
            }
        },
        "/games/coinflip/stats": {
            "get": {
                "operationId": "CoinFlipController_getStats",
                "summary": "Get User Coin Flip Statistics",
                "description": "Retrieves comprehensive statistics about a user's performance in coin flip games for a specific token type. Statistics include total games played, win/loss ratio, total amounts bet and won, net profit, distribution of heads/tails results, and largest win amount.",
                "parameters": [
                    {
                        "name": "x-client-secret",
                        "in": "header",
                        "description": "Client Secret for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-client-id",
                        "in": "header",
                        "description": "Client ID for application identification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "x-api-key",
                        "in": "header",
                        "description": "API Key for application authentication",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenType",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully. Returns detailed gaming statistics including win rate, financial metrics, and result distribution for the specified account and token type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoinFlipStats"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters. Occurs when accountId or tokenType is missing or invalid."
                    },
                    "401": {
                        "description": "Unauthorized. Authentication credentials are missing or invalid."
                    },
                    "500": {
                        "description": "Internal server error. An unexpected error occurred while calculating statistics."
                    }
                },
                "tags": [
                    "Coin Flip Game"
                ]
            }
        }
    },
    "info": {
        "title": "AFEL Discovery API Documentation",
        "description": "The AFEL Discovery API",
        "version": "1.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "api_key": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization"
            },
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "S3Request": {
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "example": "afel-xyz"
                    },
                    "clientSecret": {
                        "type": "string",
                        "example": "afel-xyz"
                    }
                },
                "required": [
                    "clientId",
                    "clientSecret"
                ]
            },
            "FileRequest": {
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "example": "afel-xyz"
                    },
                    "clientSecret": {
                        "type": "string",
                        "example": "afel-xyz"
                    },
                    "key": {
                        "type": "string",
                        "example": "afel-xyz"
                    }
                },
                "required": [
                    "clientId",
                    "clientSecret",
                    "key"
                ]
            },
            "UseReferralCodeRequest": {
                "type": "object",
                "properties": {
                    "referalCode": {
                        "type": "string",
                        "description": "Referance code",
                        "example": "ABC123"
                    }
                },
                "required": [
                    "referalCode"
                ]
            },
            "ReferedUserDto": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "afelId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "referedDate": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "accountId",
                    "afelId",
                    "referedDate"
                ]
            },
            "GetAccountReferralRelationsDto": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "123456"
                    },
                    "afelId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "123456"
                    },
                    "referedUsers": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReferedUserDto"
                        }
                    }
                },
                "required": [
                    "accountId",
                    "afelId",
                    "referedUsers"
                ]
            },
            "BalanceResponse": {
                "type": "object",
                "properties": {
                    "tokenType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "balance": {
                        "type": "string",
                        "readOnly": true,
                        "example": 100
                    },
                    "availableBalance": {
                        "type": "string",
                        "readOnly": true
                    },
                    "totalBlockedAmount": {
                        "type": "string",
                        "readOnly": true
                    },
                    "activeBlockages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "tokenType",
                    "balance",
                    "availableBalance",
                    "totalBlockedAmount",
                    "activeBlockages"
                ]
            },
            "WalletDepositRequest": {
                "type": "object",
                "properties": {
                    "referenceId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Idempotent reference ID"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "Type of token",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "accountId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "AFEL accountId"
                    },
                    "amount": {
                        "type": "string",
                        "example": "0.1",
                        "description": "Amount to deposit"
                    },
                    "chainTrxId": {
                        "type": "string",
                        "example": "F8HM3mqwZSnUpdpaZrq6rsZ5iT9vPPvVkh9EMa16szBDAhdqirhDHbZazvNpMPBpp19HHb1Wk23y8qLnGEwt35Y",
                        "description": "Transaction signature"
                    },
                    "senderWalletAddress": {
                        "type": "string",
                        "description": "Sender wallet address"
                    },
                    "receiverWalletAddress": {
                        "type": "string",
                        "description": "Receiver wallet address"
                    }
                },
                "required": [
                    "referenceId",
                    "tokenType",
                    "accountId",
                    "amount",
                    "chainTrxId",
                    "senderWalletAddress",
                    "receiverWalletAddress"
                ]
            },
            "WalletDepositResponse": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Transaction unique identifier"
                    },
                    "oldBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Balance before transaction"
                    },
                    "addedAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Amount added in transaction"
                    },
                    "newBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Balance after transaction"
                    }
                },
                "required": [
                    "transactionId",
                    "oldBalance",
                    "addedAmount",
                    "newBalance"
                ]
            },
            "PrizeDepositRequest": {
                "type": "object",
                "properties": {
                    "referenceId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Idempotent reference ID"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "Type of token",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "accountId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "AFEL accountId"
                    },
                    "amount": {
                        "type": "string",
                        "example": "0.1",
                        "description": "Amount to deposit"
                    },
                    "type": {
                        "type": "string",
                        "example": "FIRST_FIVE_GAME",
                        "description": "Type of prize, e.g. FIRST_FIVE_GAME, DEFAULT, AIRDROP, etc..."
                    }
                },
                "required": [
                    "referenceId",
                    "tokenType",
                    "accountId",
                    "amount",
                    "type"
                ]
            },
            "PrizeDepositResponse": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Transaction unique identifier"
                    },
                    "oldBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Balance before transaction"
                    },
                    "addedAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Amount added in transaction"
                    },
                    "newBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Balance after transaction"
                    }
                },
                "required": [
                    "transactionId",
                    "oldBalance",
                    "addedAmount",
                    "newBalance"
                ]
            },
            "GameRankDto": {
                "type": "object",
                "properties": {
                    "rank": {
                        "type": "number",
                        "example": 1,
                        "description": "Rank of the player"
                    },
                    "accountId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Player accountId"
                    },
                    "walletAddress": {
                        "type": "string",
                        "example": "walletAddress",
                        "description": "Player wallet address"
                    }
                },
                "required": [
                    "rank",
                    "accountId",
                    "walletAddress"
                ]
            },
            "GameDepositRequest": {
                "type": "object",
                "properties": {
                    "referenceId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Idempotent reference ID"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "Type of token",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "gameId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Game unique identifier"
                    },
                    "totalBetAmount": {
                        "type": "string",
                        "example": "100",
                        "description": "Total bet amount for the game"
                    },
                    "gameRanks": {
                        "example": [
                            {
                                "rank": 1,
                                "accountId": "uuid-1",
                                "walletAddress": "wallet-address-1"
                            },
                            {
                                "rank": 2,
                                "accountId": "uuid-2",
                                "walletAddress": "wallet-address-2"
                            }
                        ],
                        "description": "Game ranks and accountIds",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameRankDto"
                        }
                    },
                    "totalPlayers": {
                        "type": "number",
                        "example": 4,
                        "description": "Total number of players"
                    }
                },
                "required": [
                    "referenceId",
                    "tokenType",
                    "gameId",
                    "totalBetAmount",
                    "gameRanks",
                    "totalPlayers"
                ]
            },
            "GameDepositCommissionResponse": {
                "type": "object",
                "properties": {
                    "rate": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Commission rate applied"
                    },
                    "amount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Commission amount collected"
                    },
                    "txId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Commission transfer transaction ID"
                    }
                },
                "required": [
                    "rate",
                    "amount",
                    "txId"
                ]
            },
            "GamePlayerResult": {
                "type": "object",
                "properties": {
                    "rank": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Player rank in game"
                    },
                    "accountId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Player account ID"
                    },
                    "oldBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Balance before transaction"
                    },
                    "newBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Balance after transaction"
                    },
                    "addedAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Net amount added to balance"
                    },
                    "nftCount": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Number of NFTs held by player"
                    },
                    "commission": {
                        "readOnly": true,
                        "example": "Commission details for this player",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GameDepositCommissionResponse"
                            }
                        ]
                    }
                },
                "required": [
                    "rank",
                    "accountId",
                    "oldBalance",
                    "newBalance",
                    "addedAmount",
                    "nftCount",
                    "commission"
                ]
            },
            "GameDepositResponse": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Transaction unique identifier"
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Game unique identifier"
                    },
                    "totalBetAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Total bet amount for the game"
                    },
                    "processedBlockages": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Number of blockages processed"
                    },
                    "winnerBlockageAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Amount blocked for winner"
                    },
                    "totalBurnedAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Total amount burned from losers"
                    },
                    "results": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GamePlayerResult"
                        }
                    }
                },
                "required": [
                    "transactionId",
                    "gameId",
                    "totalBetAmount",
                    "processedBlockages",
                    "winnerBlockageAmount",
                    "totalBurnedAmount",
                    "results"
                ]
            },
            "WithdrawRequestDto": {
                "type": "object",
                "properties": {
                    "referenceId": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Account ID to withdraw from"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "Type of token to block",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ],
                        "examples": [
                            "SOL",
                            "WAA",
                            "USDC"
                        ]
                    },
                    "amount": {
                        "type": "string",
                        "example": "100",
                        "description": "Amount of money to withdraw"
                    },
                    "destinationAddress": {
                        "type": "string",
                        "example": "0x1234567890",
                        "description": "Destination address to send the money"
                    }
                },
                "required": [
                    "referenceId",
                    "accountId",
                    "tokenType",
                    "amount",
                    "destinationAddress"
                ]
            },
            "TokenBalance": {
                "type": "object",
                "properties": {
                    "tokenType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "oldBalance": {
                        "type": "string",
                        "readOnly": true
                    },
                    "newBalance": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "tokenType",
                    "oldBalance",
                    "newBalance"
                ]
            },
            "WithdrawResponse": {
                "type": "object",
                "properties": {
                    "rpcTransactionId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "transferredAmount": {
                        "type": "string",
                        "readOnly": true
                    },
                    "balances": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TokenBalance"
                        }
                    }
                },
                "required": [
                    "rpcTransactionId",
                    "transferredAmount",
                    "balances"
                ]
            },
            "AddBlockageDto": {
                "type": "object",
                "properties": {
                    "referenceId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Reference ID for the transaction"
                    },
                    "accountId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Afel accountId"
                    },
                    "gameId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Afel gameId"
                    },
                    "amount": {
                        "type": "string",
                        "example": 100,
                        "description": "Amount of money to block"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "Type of token to AFEL ecosystem",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ],
                        "examples": [
                            "SOL",
                            "WAA",
                            "DEGOD"
                        ]
                    }
                },
                "required": [
                    "referenceId",
                    "accountId",
                    "gameId",
                    "amount",
                    "tokenType"
                ]
            },
            "AddBlockageResponse": {
                "type": "object",
                "properties": {
                    "blockageId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "uuid"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "example": "BLOCKED",
                        "enum": [
                            "BLOCKED",
                            "UNBLOCKED",
                            "BURNED",
                            "DEPOSIT",
                            "WITHDRAW",
                            "FEE",
                            "BURN"
                        ]
                    },
                    "amount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "0.005"
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "gameId"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "blockageId",
                    "type",
                    "amount",
                    "gameId",
                    "createdAt"
                ]
            },
            "RemoveBlockageDto": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Account ID to remove blockage from"
                    },
                    "blockageId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Blockage ID to remove"
                    }
                },
                "required": [
                    "accountId",
                    "blockageId"
                ]
            },
            "RemoveBlockageResponse": {
                "type": "object",
                "properties": {
                    "blockageId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "string",
                        "readOnly": true
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "removedAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "blockageId",
                    "type",
                    "amount",
                    "gameId",
                    "removedAt"
                ]
            },
            "RemoveMultipleBlockagesDto": {
                "type": "object",
                "properties": {
                    "referenceId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Reference ID for the transaction"
                    },
                    "accountIds": {
                        "example": [
                            "uuid1",
                            "uuid2"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "blockageIds": {
                        "example": [
                            "uuid1",
                            "uuid2"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "referenceId",
                    "accountIds",
                    "blockageIds"
                ]
            },
            "RemovedBlockageItemDto": {
                "type": "object",
                "properties": {
                    "blockageId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "INITIALIZED",
                            "COMPLETED",
                            "FAILED",
                            "ACTIVE"
                        ]
                    },
                    "amount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "removedAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "blockageId",
                    "status",
                    "amount",
                    "gameId",
                    "removedAt"
                ]
            },
            "RemoveMultipleBlockagesResponseDto": {
                "type": "object",
                "properties": {
                    "removedBlockages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RemovedBlockageItemDto"
                        }
                    },
                    "totalCount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "totalAmount": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "removedBlockages",
                    "totalCount",
                    "totalAmount"
                ]
            },
            "ActiveBlockageItemDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "string",
                        "readOnly": true
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "BLOCKED",
                            "UNBLOCKED",
                            "BURNED",
                            "DEPOSIT",
                            "WITHDRAW",
                            "FEE",
                            "BURN"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "INITIALIZED",
                            "COMPLETED",
                            "FAILED",
                            "ACTIVE"
                        ]
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "gameId",
                    "amount",
                    "tokenType",
                    "type",
                    "status",
                    "createdAt"
                ]
            },
            "ActiveBlockagesResponseDto": {
                "type": "object",
                "properties": {
                    "blockages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActiveBlockageItemDto"
                        }
                    },
                    "totalBlockedAmount": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "blockages",
                    "totalBlockedAmount"
                ]
            },
            "BlockageHistoryItemDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "string",
                        "readOnly": true
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "BLOCKED",
                            "UNBLOCKED",
                            "BURNED",
                            "DEPOSIT",
                            "WITHDRAW",
                            "FEE",
                            "BURN"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "INITIALIZED",
                            "COMPLETED",
                            "FAILED",
                            "ACTIVE"
                        ]
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    },
                    "deletedAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "id",
                    "gameId",
                    "amount",
                    "tokenType",
                    "type",
                    "status",
                    "createdAt",
                    "deletedAt"
                ]
            },
            "BlockageHistoryResponseDto": {
                "type": "object",
                "properties": {
                    "blockages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlockageHistoryItemDto"
                        }
                    },
                    "total": {
                        "type": "number",
                        "readOnly": true
                    },
                    "limit": {
                        "type": "number",
                        "readOnly": true
                    },
                    "offset": {
                        "type": "number",
                        "readOnly": true
                    }
                },
                "required": [
                    "blockages",
                    "total",
                    "limit",
                    "offset"
                ]
            },
            "BurnBlockageDto": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "Type of token to block",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ],
                        "examples": [
                            "SOL",
                            "WAA",
                            "USDC"
                        ]
                    },
                    "blockageId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Blockage ID to burn"
                    },
                    "gameId": {
                        "type": "string",
                        "example": "uuid",
                        "description": "Afel gameId"
                    }
                },
                "required": [
                    "accountId",
                    "tokenType",
                    "blockageId",
                    "gameId"
                ]
            },
            "BurnBlockageResponse": {
                "type": "object",
                "properties": {
                    "blockageId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "uuid"
                    },
                    "gameId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "gameId"
                    },
                    "burnedAmount": {
                        "type": "string",
                        "readOnly": true,
                        "example": "0.005"
                    },
                    "oldBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "100"
                    },
                    "newBalance": {
                        "type": "string",
                        "readOnly": true,
                        "example": "95"
                    },
                    "burnedAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "blockageId",
                    "gameId",
                    "burnedAmount",
                    "oldBalance",
                    "newBalance",
                    "burnedAt"
                ]
            },
            "NFTMetadataDto": {
                "type": "object",
                "properties": {
                    "mintAddress": {
                        "type": "string",
                        "description": "NFT mint address"
                    },
                    "name": {
                        "type": "string",
                        "description": "NFT name"
                    },
                    "uri": {
                        "type": "string",
                        "description": "NFT metadata URI"
                    },
                    "isFrozen": {
                        "type": "boolean",
                        "description": "NFT freeze status"
                    },
                    "freezeDelegate": {
                        "type": "boolean",
                        "description": "NFT freeze delegate status"
                    }
                },
                "required": [
                    "mintAddress",
                    "name",
                    "uri",
                    "isFrozen",
                    "freezeDelegate"
                ]
            },
            "FreezeNFTsRequestDto": {
                "type": "object",
                "properties": {
                    "walletAddress": {
                        "type": "string",
                        "description": "Wallet address"
                    },
                    "mintAddresses": {
                        "description": "Array of NFT mint addresses",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "walletAddress",
                    "mintAddresses"
                ]
            },
            "TransactionResponseDto": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "description": "Array of serialized transactions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "transactions"
                ]
            },
            "FinalizeTransactionRequestDto": {
                "type": "object",
                "properties": {
                    "signedTransaction": {
                        "type": "string",
                        "description": "Base64 encoded signed transaction"
                    }
                },
                "required": [
                    "signedTransaction"
                ]
            },
            "TransactionSignatureDto": {
                "type": "object",
                "properties": {
                    "signature": {
                        "type": "string",
                        "description": "Transaction signature"
                    }
                },
                "required": [
                    "signature"
                ]
            },
            "WalletStatsDto": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Wallet address"
                    },
                    "totalPoints": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Total points earned"
                    },
                    "stakedNFTCount": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Number of staked NFTs"
                    },
                    "totalNFTCount": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Total number of NFTs"
                    },
                    "stakedSince": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Staking start timestamp"
                    },
                    "frozenPercentage": {
                        "type": "number",
                        "readOnly": true,
                        "example": "Frozen percentage"
                    }
                },
                "required": [
                    "address",
                    "totalPoints",
                    "stakedNFTCount",
                    "totalNFTCount",
                    "stakedSince",
                    "frozenPercentage"
                ]
            },
            "StakedNFTDto": {
                "type": "object",
                "properties": {
                    "mintAddress": {
                        "type": "string",
                        "description": "NFT mint address"
                    },
                    "name": {
                        "type": "string",
                        "description": "NFT name"
                    },
                    "frozenDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Staking start date"
                    },
                    "points": {
                        "type": "number",
                        "description": "Points earned"
                    }
                },
                "required": [
                    "mintAddress",
                    "name",
                    "frozenDate",
                    "points"
                ]
            },
            "WalletPointsDto": {
                "type": "object",
                "properties": {
                    "totalPoints": {
                        "type": "number",
                        "description": "Total points"
                    },
                    "nftPoints": {
                        "type": "object",
                        "description": "Points per NFT"
                    }
                },
                "required": [
                    "totalPoints",
                    "nftPoints"
                ]
            },
            "LeaderboardEntryDto": {
                "type": "object",
                "properties": {
                    "walletAddress": {
                        "type": "string",
                        "description": "Wallet address"
                    },
                    "totalPoints": {
                        "type": "number",
                        "description": "Total points"
                    },
                    "stakedNFTs": {
                        "type": "number",
                        "description": "Number of staked NFTs"
                    }
                },
                "required": [
                    "walletAddress",
                    "totalPoints",
                    "stakedNFTs"
                ]
            },
            "LeaderboardResponseDto": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LeaderboardEntryDto"
                        }
                    },
                    "total": {
                        "type": "number",
                        "description": "Total number of entries"
                    }
                },
                "required": [
                    "items",
                    "total"
                ]
            },
            "TransactionStatusDto": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "CONFIRMED",
                            "FAILED"
                        ]
                    },
                    "walletAddress": {
                        "type": "string",
                        "description": "Transaction signature"
                    },
                    "action": {
                        "type": "string",
                        "description": "Stake Status"
                    },
                    "confirmedAt": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Confirmed at"
                    },
                    "error": {
                        "type": "string",
                        "description": "Error message"
                    }
                },
                "required": [
                    "status",
                    "walletAddress",
                    "action",
                    "confirmedAt",
                    "error"
                ]
            },
            "CheckTickerResponse": {
                "type": "object",
                "properties": {
                    "userTotalTicketCount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "systemTotalTicketCount": {
                        "type": "number",
                        "readOnly": true
                    }
                },
                "required": [
                    "userTotalTicketCount",
                    "systemTotalTicketCount"
                ]
            },
            "PaginationMetadata": {
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "number",
                        "description": "Total number of NFTs matching the filters",
                        "example": 3333
                    },
                    "totalPages": {
                        "type": "number",
                        "description": "Total number of pages",
                        "example": 167
                    },
                    "currentPage": {
                        "type": "number",
                        "description": "Current page number",
                        "example": 1
                    },
                    "itemsPerPage": {
                        "type": "number",
                        "description": "Number of items per page",
                        "example": 20
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": "Indicates if there is a next page",
                        "example": true
                    },
                    "hasPreviousPage": {
                        "type": "boolean",
                        "description": "Indicates if there is a previous page",
                        "example": false
                    },
                    "itemCount": {
                        "type": "number",
                        "description": "Number of items on the current page",
                        "example": 20
                    },
                    "startIndex": {
                        "type": "number",
                        "description": "Starting index of current page",
                        "example": 0
                    },
                    "endIndex": {
                        "type": "number",
                        "description": "Ending index of current page",
                        "example": 19
                    }
                },
                "required": [
                    "totalItems",
                    "totalPages",
                    "currentPage",
                    "itemsPerPage",
                    "hasNextPage",
                    "hasPreviousPage",
                    "itemCount",
                    "startIndex",
                    "endIndex"
                ]
            },
            "PaginatedResponseDto": {
                "type": "object",
                "properties": {
                    "items": {
                        "description": "List of NFTs matching the filters",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "meta": {
                        "description": "Pagination metadata",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PaginationMetadata"
                            }
                        ]
                    }
                },
                "required": [
                    "items",
                    "meta"
                ]
            },
            "WaitingListStatusResponse": {
                "type": "object",
                "properties": {
                    "position": {
                        "type": "number",
                        "readOnly": true
                    },
                    "potentialOgCount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "priority": {
                        "type": "number",
                        "readOnly": true
                    }
                },
                "required": [
                    "position",
                    "potentialOgCount",
                    "priority"
                ]
            },
            "AccountTokenStatusResponse": {
                "type": "object",
                "properties": {
                    "totalOgSpot": {
                        "type": "number",
                        "readOnly": true
                    },
                    "assignedOgSpots": {
                        "type": "number",
                        "readOnly": true
                    },
                    "remainingOgSpots": {
                        "type": "number",
                        "readOnly": true
                    },
                    "ogTokenRequirement": {
                        "type": "number",
                        "readOnly": true
                    },
                    "wlTokenRequirement": {
                        "type": "number",
                        "readOnly": true
                    },
                    "maxOgPerAccount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "totalOg": {
                        "type": "number",
                        "readOnly": true
                    },
                    "totalWl": {
                        "type": "number",
                        "readOnly": true
                    },
                    "waitingListStatus": {
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WaitingListStatusResponse"
                            }
                        ]
                    }
                },
                "required": [
                    "totalOgSpot",
                    "assignedOgSpots",
                    "remainingOgSpots",
                    "ogTokenRequirement",
                    "wlTokenRequirement",
                    "maxOgPerAccount",
                    "totalOg",
                    "totalWl",
                    "waitingListStatus"
                ]
            },
            "PlaySlotMachineDto": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000",
                        "description": "Unique identifier of the user account playing the slot machine"
                    },
                    "betAmount": {
                        "type": "number",
                        "example": 0.1,
                        "description": "The amount to bet on this slot machine game (minimum 0.01)"
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "The type of token being used for the bet (SOL or AFEL)",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "referenceId": {
                        "type": "string",
                        "example": "txref-123456789",
                        "description": "Unique reference ID to ensure idempotency of transactions"
                    }
                },
                "required": [
                    "accountId",
                    "betAmount",
                    "tokenType",
                    "referenceId"
                ]
            },
            "SlotMachineResultDto": {
                "type": "object",
                "properties": {
                    "symbols": {
                        "readOnly": true,
                        "example": [
                            "LEMON",
                            "LEMON",
                            "ORANGE"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "won": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": true
                    },
                    "multiplier": {
                        "type": "number",
                        "readOnly": true,
                        "example": 3
                    },
                    "betAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.1
                    },
                    "winAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.3
                    },
                    "balanceBefore": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1.5
                    },
                    "balanceAfter": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1.7
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "SOL",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "transactionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "uuid"
                    },
                    "winningLines": {
                        "type": "array",
                        "readOnly": true,
                        "example": [],
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "required": [
                    "symbols",
                    "won",
                    "multiplier",
                    "betAmount",
                    "winAmount",
                    "balanceBefore",
                    "balanceAfter",
                    "tokenType",
                    "transactionId",
                    "winningLines"
                ]
            },
            "SlotMachineHistoryItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "symbols": {
                        "readOnly": true,
                        "example": [
                            "LEMON",
                            "LEMON",
                            "ORANGE"
                        ],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "betAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.1
                    },
                    "winAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.3
                    },
                    "multiplier": {
                        "type": "number",
                        "readOnly": true,
                        "example": 3
                    },
                    "won": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": true
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "SOL",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true,
                        "example": "2023-06-15T14:30:00Z"
                    }
                },
                "required": [
                    "id",
                    "symbols",
                    "betAmount",
                    "winAmount",
                    "multiplier",
                    "won",
                    "tokenType",
                    "createdAt"
                ]
            },
            "SlotMachineHistoryResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SlotMachineHistoryItem"
                        }
                    },
                    "total": {
                        "type": "number",
                        "readOnly": true,
                        "example": 42
                    },
                    "page": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1
                    },
                    "limit": {
                        "type": "number",
                        "readOnly": true,
                        "example": 10
                    }
                },
                "required": [
                    "items",
                    "total",
                    "page",
                    "limit"
                ]
            },
            "SlotMachineStats": {
                "type": "object",
                "properties": {
                    "totalGames": {
                        "type": "number",
                        "readOnly": true,
                        "example": 100
                    },
                    "wins": {
                        "type": "number",
                        "readOnly": true,
                        "example": 35
                    },
                    "losses": {
                        "type": "number",
                        "readOnly": true,
                        "example": 65
                    },
                    "winRate": {
                        "type": "number",
                        "readOnly": true,
                        "example": 35
                    },
                    "totalBetAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 15.5
                    },
                    "totalWinAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 12.8
                    },
                    "netProfit": {
                        "type": "number",
                        "readOnly": true,
                        "example": -2.7
                    },
                    "avgMultiplier": {
                        "type": "number",
                        "readOnly": true,
                        "example": 2.2
                    },
                    "symbolFrequency": {
                        "type": "object",
                        "readOnly": true,
                        "example": {
                            "LEMON": 45,
                            "ORANGE": 30,
                            "MEAT": 20,
                            "TRUMP": 15,
                            "SOLANA": 8,
                            "AFEL": 2
                        }
                    },
                    "largestWin": {
                        "type": "number",
                        "readOnly": true,
                        "example": 3.5
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "SOL",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    }
                },
                "required": [
                    "totalGames",
                    "wins",
                    "losses",
                    "winRate",
                    "totalBetAmount",
                    "totalWinAmount",
                    "netProfit",
                    "avgMultiplier",
                    "symbolFrequency",
                    "largestWin",
                    "tokenType"
                ]
            },
            "PlayCoinFlipDto": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000",
                        "description": "Unique identifier of the user account playing the game"
                    },
                    "betAmount": {
                        "type": "number",
                        "example": 0.1,
                        "description": "The amount to bet on this coin flip game (minimum 0.01)"
                    },
                    "choice": {
                        "type": "string",
                        "example": "HEADS",
                        "description": "The side of the coin the player is betting on (HEADS or TAILS)",
                        "enum": [
                            "HEADS",
                            "TAILS"
                        ]
                    },
                    "tokenType": {
                        "type": "string",
                        "example": "SOL",
                        "description": "The type of token being used for the bet (SOL or AFEL)",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "referenceId": {
                        "type": "string",
                        "example": "txref-123456789",
                        "description": "Unique reference ID to ensure idempotency of transactions"
                    }
                },
                "required": [
                    "accountId",
                    "betAmount",
                    "choice",
                    "tokenType",
                    "referenceId"
                ]
            },
            "CoinFlipResultDto": {
                "type": "object",
                "properties": {
                    "choice": {
                        "type": "string",
                        "readOnly": true,
                        "example": "HEADS",
                        "enum": [
                            "HEADS",
                            "TAILS"
                        ]
                    },
                    "result": {
                        "type": "string",
                        "readOnly": true,
                        "example": "TAILS",
                        "enum": [
                            "HEADS",
                            "TAILS"
                        ]
                    },
                    "won": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "betAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.1
                    },
                    "winAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.196
                    },
                    "commission": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.004
                    },
                    "balanceBefore": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1.5
                    },
                    "balanceAfter": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1.696
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "SOL",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "transactionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                },
                "required": [
                    "choice",
                    "result",
                    "won",
                    "betAmount",
                    "winAmount",
                    "commission",
                    "balanceBefore",
                    "balanceAfter",
                    "tokenType",
                    "transactionId"
                ]
            },
            "CoinFlipHistoryItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "result": {
                        "type": "string",
                        "readOnly": true,
                        "example": "HEADS",
                        "enum": [
                            "HEADS",
                            "TAILS"
                        ]
                    },
                    "choice": {
                        "type": "string",
                        "readOnly": true,
                        "example": "TAILS",
                        "enum": [
                            "HEADS",
                            "TAILS"
                        ]
                    },
                    "betAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.1
                    },
                    "winAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 0.196
                    },
                    "won": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "SOL",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "readOnly": true,
                        "example": "2023-06-15T14:30:00Z"
                    }
                },
                "required": [
                    "id",
                    "result",
                    "choice",
                    "betAmount",
                    "winAmount",
                    "won",
                    "tokenType",
                    "createdAt"
                ]
            },
            "CoinFlipHistoryResponse": {
                "type": "object",
                "properties": {
                    "items": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CoinFlipHistoryItem"
                        }
                    },
                    "total": {
                        "type": "number",
                        "readOnly": true,
                        "example": 42
                    },
                    "page": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1
                    },
                    "limit": {
                        "type": "number",
                        "readOnly": true,
                        "example": 10
                    }
                },
                "required": [
                    "items",
                    "total",
                    "page",
                    "limit"
                ]
            },
            "CoinFlipStats": {
                "type": "object",
                "properties": {
                    "totalGames": {
                        "type": "number",
                        "readOnly": true,
                        "example": 100
                    },
                    "wins": {
                        "type": "number",
                        "readOnly": true,
                        "example": 48
                    },
                    "losses": {
                        "type": "number",
                        "readOnly": true,
                        "example": 52
                    },
                    "winRate": {
                        "type": "number",
                        "readOnly": true,
                        "example": 48
                    },
                    "totalBetAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 10.5
                    },
                    "totalWinAmount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 9.8
                    },
                    "netProfit": {
                        "type": "number",
                        "readOnly": true,
                        "example": -0.7
                    },
                    "headsCount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 53
                    },
                    "tailsCount": {
                        "type": "number",
                        "readOnly": true,
                        "example": 47
                    },
                    "largestWin": {
                        "type": "number",
                        "readOnly": true,
                        "example": 1.96
                    },
                    "tokenType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "SOL",
                        "enum": [
                            "SOL",
                            "WAA",
                            "AFEL",
                            "USDC"
                        ]
                    }
                },
                "required": [
                    "totalGames",
                    "wins",
                    "losses",
                    "winRate",
                    "totalBetAmount",
                    "totalWinAmount",
                    "netProfit",
                    "headsCount",
                    "tailsCount",
                    "largestWin",
                    "tokenType"
                ]
            }
        }
    }
}